=head1 GrÃ¡ficos de sua AplicaÃ§Ã£o Catalyst

HÃ¡ casos em que nossos aplicativos em Catalyst sÃ£o tÃ£o extensos, com 
regras de negÃ³cio tÃ£o complexas, que podemos nos sentir um pouco 
soterrados pela enorme quantidade de componentes e correlaÃ§Ãµes. Ou talvez 
fiquemos tÃ£o concentrados em uma pequena parte que acabamos perdendo a 
visÃ£o geral do aplicativo. Nada tema!

O mundo Perl oferece uma sÃ©rie de ferramentas de visualizaÃ§Ã£o. No artigo
de hoje daremos uma olhada mais de perto em trÃªs delas, uma para cada
elemento do MVC, usando uma instalaÃ§Ã£o padrÃ£o do L<MojoMojo|http://mojomojo.org>
para ilustrar os resultados.

=head2 GrÃ¡ficos do 'Model'

O incrÃ­vel mÃ³dulo L<SQL::Translator|http://search.cpan.org/perldoc?SQL::Translator> 
pode facilmente mostrar como o esquema de seu modelo se parece, diretamente
do esquema de seu banco de dados - seja MySQL, Oracle, PostreSQL, SQLite, 
ou qualquer um dos diversos parsers de bancos de dados disponÃ­veis. Basta 
especificÃ¡-lo no campo 'from', escolhendo 'GraphViz' como destino.

  use SQL::Translator;

  my $translator = SQL::Translator->new(
          from => 'MySQL',
          to   => 'GraphViz',
  ) or die SQL::Translator->error;

  $translator->translate( 'MySchema.sql' );

Se sua aplicaÃ§Ã£o Catalyst usa o popular DBIx::Class (DBIC), vocÃª pode 
obter informaÃ§Ãµes sobre o banco diretamente dos mÃ³dulos de esquema! Para 
isso, escolha 'C<< SQL::Translator::Parser::DBIx::Class >>' como 'C<parser>',
e passe o esquema jÃ¡ carregado no parÃ¢metro 'C<parser_args>'. O cÃ³digo abaixo
mostra como fazer isso, incluindo algumas personalizaÃ§Ãµes da imagem de
saÃ­da atravÃ©s do parÃ¢metro 'C<producer_args>'

  use SQL::Translator;

  use MyApp::Schema;   # substitua pelo nome da classe de seu esquema
  my $schema = MyApp::Schema->connect;

  my $translator = SQL::Translator->new(
      parser        => 'SQL::Translator::Parser::DBIx::Class',
      parser_args   => { package => $schema },
      producer      => 'Diagram',
      producer_args => {
          out_file       => 'schema.png',
          output_type    => 'png',
          title          => 'Meu Model',
      },
  ) or die SQL::Translator->error;

  $translator->translate;

VocÃª pode atÃ© mesmo criar uma action do Catalyst que gera o diagrama do projeto atual:

  sub schema : Local {
      my ( $self, $c ) = @_;

      my $translator = SQL::Translator->new(
          parser        => 'SQL::Translator::Parser::DBIx::Class',
          data          => $c->model('DB')->schema,
          producer      => 'Diagram',
          producer_args => {
              output_type => 'png',
              title       => 'Model da App',
          },
      ) or die SQL::Translator->error;

      $c->res->content_type('image/png');
      $c->res->body( $translator->translate );

  }

O resultado? Veja por si mesmo :)

=begin pod:xhtml

<a style="border-bottom:none" href="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-schema.png">
<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-schema-thumb.png" alt="schema padrao do MojoMojo" />
</a> 

=end pod:xhtml

=head2 GrÃ¡ficos do 'Controller'

Talvez o 'I<model>' nÃ£o seja seu (Ãºnico) problema, e a quantidade de
controllers e actions de sua aplicaÃ§Ã£o cresceu tanto que precisam de
mais documentaÃ§Ã£o, um guia de referÃªncia rÃ¡pida, ou atÃ© mesmo alguma
refatoraÃ§Ã£o de cÃ³digo. Embora a estrutura de controllers do Catalyst
costume levar a uma boa organizaÃ§Ã£o por parte do programador, 
acidentes de percurso podem ocorrer.

Felizmente para nÃ³s, L<Franck Cuny|http://lumberjaph.net/blog/> criou 
um mÃ³dulo muito conveniente chamado L<CatalystX::Dispatcher::AsGraph|http://search.cpan.org/perldoc?CatalystX::Dispatcher::AsGraph>, 
que exibe suas I<actions> privadas em um belo grafo direcionado (digrafo),
com apenas algumas linhas de cÃ³digo!

  use CatalystX::Dispatcher::AsGraph;
   
  my $graph = CatalystX::Dispatcher::AsGraph->new(
        appname => 'MyApp',
        output  => 'minhas_actions.png',
  );
  $graph->run;

Se o cÃ³digo acima for executado com sucesso, a variÃ¡vel C<$graph> contÃ©m
um objeto C<< Graph::Easy >> contendo o grafo das I<actions>. Podemos 
usar o programa C<dot> para exportar nosso grafo para um arquivo png:

  if ( open( my $png, '|-', 'dot -Tpng -o ' . $graph->output ) ) {
      print $png $graph->graph->as_graphviz;
      close $png;
  }

Um programa de exemplo, que vem com a distribuiÃ§Ã£o do mÃ³dulo, faz 
exatamente isso, mas utiliza o mÃ³dulo C<< MooseX::GetOpt >> para deixar
que o usuÃ¡rio especifique os parÃ¢metros do mÃ³dulo como opÃ§Ãµes de linha
de comando.

B<Nota:> Khisanth mencionou que, como esse mÃ³dulo utiliza C<< MooseX::Declare >> 
e nÃ£o possui informaÃ§Ãµes de pacote, o indexador do CPAN nÃ£o o registra,
e a shell do CPAN nÃ£o o encontra. AtÃ© que o autor corrija isso, vocÃª precisarÃ¡
usar o caminho completo para instalar a distribuiÃ§Ã£o (por exemplo, digitando 
C<< install FRANCKC/CatalystX-Dispatcher-AsGraph-0.02.tar.gz >> na shell do 
CPAN), ou obter o .tar.gz diretamente da web.

=begin pod:xhtml

<a style="border-bottom:none" href="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-controllers.png">
<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-controllers-thumb.png" alt="actions privadas do MojoMojo" />
</a>

=end pod:xhtml


=head2 GrÃ¡ficos da 'View'

Assim como o I<schema> e as I<actions>, vocÃª pode ver toda a sua estrutura 
de templates como um grafo direcionado. O mÃ³dulo 
L<Template::AsGraph|http://search.cpan.org/perldoc?Template::AsGraph>
mode ser facilmente chamado para gerar esses dados a partir de qualquer
template:

  use Template::AsGraph;

  my $graph = Template::AsGraph->graph('meu_template.tt2');

A variÃ¡vel C<$graph> retornada Ã© um objeto C<Graph::Easy> que pode ser
transformado em uma imagem PNG exatamente como vocÃª fez com o grÃ¡fico
do Controller:

  if ( open( my $png, '|-', 'dot -Tpng -o grafo_do_template.png' ) ) {
      print $png $graph->graph->as_graphviz;
      close $png;
  }

Agora, se vocÃª precisa entender como seus templates se relacionam 
entre si, entÃ£o seu fluxo de exibiÃ§Ã£o Ã© tÃ£o intricado que vocÃª 
provavelmente carrega diferentes partes dinamicamente, conforme os
dados passados pelo Controller. NÃ£o se preocupe: o mÃ©todo C<< graph() >>
tambÃ©m pode receber configuraÃ§Ãµes do TT como segundo argumento, e
variÃ¡veis como terceiro:

  use Template::AsGraph;

  my %config = (
      INCLUDE_PATH => 'root/src/',
      START_TAG    => '<+',
      END_TAG      => '+>',
      PLUGIN_BASE  => 'MyApp::Template::Plugin',
      PRE_PROCESS  => 'header',
  );

  my %vars = (
       foo => 'bar',
       bar => 'baz', 
  );

Como alternativa se vocÃª tem acesso a um objeto de contexto do Catalyst,
podemos ter maior precisÃ£o passando nossas variÃ¡veis para os templates 
exatamente como o C<< View::TT >> faz:

  my %vars = ( %{ $c->stash() }, 
                  c    => $c, 
                  base => $c->req->base, 
                  name => $c->config->{name} 
             );

  my $graph = Template::AsGraph->graph('meu_template.tt2', \%config, \%vars);

=begin pod:xhtml

<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-templates.png" alt="um dos templates do MojoMojo" />

=end pod:xhtml


=head2 ConclusÃ£o

Esperamos que, ao gerar e analisar os grÃ¡ficos de seu I<schema>, 
I<actions> e I<templates>, vocÃª consiga um entendimento ainda maior
da aplicaÃ§Ã£o em que estÃ¡ trabalhando. Lembre-se do que fez certo,
revise o que pode melhorar, e aja em cima do que encontrou. Dessa forma,
vocÃª certamente se tornarÃ¡ um desenvolvedor melhor, que Ã© o espÃ­rito
dos artigos deste calendÃ¡rio :)


=head2 AUTOR

Breno G. de Oliveira C<< <garu@cpan.org> >>

Bogdan Lucaciu C<< <bogdan@sinapticode.ro> >>

Traduzido e adaptado para o portuguÃªs por Breno G. de Oliveira 
a partir do L<< original em inglÃªs|http://www.catalystframework.org/calendar/2009/14 >>.

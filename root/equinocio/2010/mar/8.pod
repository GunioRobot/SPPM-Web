=head1 GrE<aacute>ficos de sua AplicaE<ccedil>E<atilde>o Catalyst

HE<aacute> casos em que nossos aplicativos em Catalyst sE<atilde>o tE<atilde>o
extensos, com regras de negE<oacute>cio tE<atilde>o complexas, que podemos nos
sentir um pouco soterrados pela enorme quantidade de componentes e
correlaE<ccedil>E<otilde>es. Ou talvez fiquemos tE<atilde>o concentrados em
uma pequena parte que acabamos perdendo a visE<atilde>o geral do aplicativo.
Nada tema!

O mundo Perl oferece uma sE<eacute>rie de ferramentas de
visualizaE<ccedil>E<atilde>o. No artigo de hoje daremos uma olhada mais de
perto em trE<ecirc>s delas, uma para cada elemento do MVC, usando uma
instalaE<ccedil>E<atilde>o padrE<atilde>o do L<MojoMojo|http://mojomojo.org>
para ilustrar os resultados.

=head2 GrE<aacute>ficos do 'Model'

O incrE<iacute>vel mE<oacute>dulo
L<SQL::Translator|http://search.cpan.org/perldoc?SQL::Translator> pode
facilmente mostrar como o esquema de seu modelo se parece, diretamente do
esquema de seu banco de dados - seja MySQL, Oracle, PostgreSQL, SQLite, ou
qualquer um dos diversos parsers de bancos de dados disponE<iacute>veis. Basta
especificE<aacute>-lo no campo 'from', escolhendo 'GraphViz' como destino.

  use SQL::Translator;

  my $translator = SQL::Translator->new(
          from => 'MySQL',
          to   => 'GraphViz',
  ) or die SQL::Translator->error;

  $translator->translate( 'MySchema.sql' );

Se sua aplicaE<ccedil>E<atilde>o Catalyst usa o popular DBIx::Class (DBIC),
vocE<ecirc> pode obter informaE<ccedil>E<otilde>es sobre o banco diretamente
dos mE<oacute>dulos de esquema! Para isso, escolha 'C<<
SQL::Translator::Parser::DBIx::Class >>' como 'C<parser>', e passe o esquema
jE<aacute> carregado no parE<acirc>metro 'C<parser_args>'. O cE<oacute>digo
abaixo mostra como fazer isso, incluindo algumas
personalizaE<ccedil>E<otilde>es da imagem de saE<iacute>da atravE<eacute>s do
parE<acirc>metro 'C<producer_args>'

  use SQL::Translator;

  use MyApp::Schema;   # substitua pelo nome da classe de seu esquema
  my $schema = MyApp::Schema->connect;

  my $translator = SQL::Translator->new(
      parser        => 'SQL::Translator::Parser::DBIx::Class',
      parser_args   => { package => $schema },
      producer      => 'Diagram',
      producer_args => {
          out_file       => 'schema.png',
          output_type    => 'png',
          title          => 'Meu Model',
      },
  ) or die SQL::Translator->error;

  $translator->translate;

VocE<ecirc> pode atE<eacute> mesmo criar uma action do Catalyst que gera o
diagrama do projeto atual:

  sub schema : Local {
      my ( $self, $c ) = @_;

      my $translator = SQL::Translator->new(
          parser        => 'SQL::Translator::Parser::DBIx::Class',
          data          => $c->model('DB')->schema,
          producer      => 'Diagram',
          producer_args => {
              output_type => 'png',
              title       => 'Model da App',
          },
      ) or die SQL::Translator->error;

      $c->res->content_type('image/png');
      $c->res->body( $translator->translate );

  }

O resultado? Veja por si mesmo :)

=begin pod:xhtml

<a style="border-bottom:none" href="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-schema.png">
<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-schema-thumb.png" alt="schema padrao do MojoMojo" />
</a> 

=end pod:xhtml

=head2 GrE<aacute>ficos do 'Controller'

Talvez o 'I<model>' nE<atilde>o seja seu (E<uacute>nico) problema, e a
quantidade de controllers e actions de sua aplicaE<ccedil>E<atilde>o cresceu
tanto que precisam de mais documentaE<ccedil>E<atilde>o, um guia de
referE<ecirc>ncia rE<aacute>pida, ou atE<eacute> mesmo alguma
refatoraE<ccedil>E<atilde>o de cE<oacute>digo. Embora a estrutura de
controllers do Catalyst costume levar a uma boa organizaE<ccedil>E<atilde>o
por parte do programador, acidentes de percurso podem ocorrer.

Felizmente para nE<oacute>s, L<Franck Cuny|http://lumberjaph.net/blog/> criou
um mE<oacute>dulo muito conveniente chamado
L<CatalystX::Dispatcher::AsGraph|http://search.cpan.org/perldoc?CatalystX::Dispatcher::AsGraph>,
que exibe suas I<actions> privadas em um belo grafo direcionado
(dE<iacute>grafo), com apenas algumas linhas de cE<oacute>digo!

  use CatalystX::Dispatcher::AsGraph;
   
  my $graph = CatalystX::Dispatcher::AsGraph->new(
        appname => 'MyApp',
        output  => 'minhas_actions.png',
  );
  $graph->run;

Se o cE<oacute>digo acima for executado com sucesso, a variE<aacute>vel
C<$graph> contE<eacute>m um objeto C<< Graph::Easy >> contendo o grafo das
I<actions>. Podemos usar o programa C<dot> para exportar nosso grafo para um
arquivo png:

  if ( open( my $png, '|-', 'dot -Tpng -o ' . $graph->output ) ) {
      print $png $graph->graph->as_graphviz;
      close $png;
  }

Um programa de exemplo, que vem com a distribuiE<ccedil>E<atilde>o do
mE<oacute>dulo, faz exatamente isso, mas utiliza o mE<oacute>dulo C<<
MooseX::GetOpt >> para deixar que o usuE<aacute>rio especifique os
parE<acirc>metros do mE<oacute>dulo como opE<ccedil>E<otilde>es de linha de
comando.

B<Nota:> Khisanth mencionou que, como esse mE<oacute>dulo utiliza C<<
MooseX::Declare >> e nE<atilde>o possui informaE<ccedil>E<otilde>es de pacote,
o indexador do CPAN nE<atilde>o o registra, e a shell do CPAN nE<atilde>o o
encontra. AtE<eacute> que o autor corrija isso, vocE<ecirc> precisarE<aacute>
usar o caminho completo para instalar a distribuiE<ccedil>E<atilde>o (por
exemplo, digitando C<< install
FRANCKC/CatalystX-Dispatcher-AsGraph-0.02.tar.gz >> na shell do CPAN), ou
obter o .tar.gz diretamente da web.

=begin pod:xhtml

<a style="border-bottom:none" href="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-controllers.png">
<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-controllers-thumb.png" alt="actions privadas do MojoMojo" />
</a>

=end pod:xhtml


=head2 GrE<aacute>ficos da 'View'

Assim como o I<schema> e as I<actions>, vocE<ecirc> pode ver toda a sua
estrutura de templates como um grafo direcionado. O mE<oacute>dulo
L<Template::AsGraph|http://search.cpan.org/perldoc?Template::AsGraph> mode ser
facilmente chamado para gerar esses dados a partir de qualquer template:

  use Template::AsGraph;

  my $graph = Template::AsGraph->graph('meu_template.tt2');

A variE<aacute>vel C<$graph> retornada E<eacute> um objeto C<Graph::Easy> que
pode ser transformado em uma imagem PNG exatamente como vocE<ecirc> fez com o
grE<aacute>fico do Controller:

  if ( open( my $png, '|-', 'dot -Tpng -o grafo_do_template.png' ) ) {
      print $png $graph->graph->as_graphviz;
      close $png;
  }

Agora, se vocE<ecirc> precisa entender como seus templates se relacionam entre
si, entE<atilde>o seu fluxo de exibiE<ccedil>E<atilde>o E<eacute> tE<atilde>o
intricado que vocE<ecirc> provavelmente carrega diferentes partes
dinamicamente, conforme os dados passados pelo Controller. NE<atilde>o se
preocupe: o mE<eacute>todo C<< graph() >> tambE<eacute>m pode receber
configuraE<ccedil>E<otilde>es do TT como segundo argumento, e
variE<aacute>veis como terceiro:

  use Template::AsGraph;

  my %config = (
      INCLUDE_PATH => 'root/src/',
      START_TAG    => '<+',
      END_TAG      => '+>',
      PLUGIN_BASE  => 'MyApp::Template::Plugin',
      PRE_PROCESS  => 'header',
  );

  my %vars = (
       foo => 'bar',
       bar => 'baz', 
  );

Como alternativa se vocE<ecirc> tem acesso a um objeto de contexto do
Catalyst, podemos ter maior precisE<atilde>o passando nossas variE<aacute>veis
para os templates exatamente como o C<< View::TT >> faz:

  my %vars = ( %{ $c->stash() }, 
                  c    => $c, 
                  base => $c->req->base, 
                  name => $c->config->{name} 
             );

  my $graph = Template::AsGraph->graph('meu_template.tt2', \%config, \%vars);

=begin pod:xhtml

<img src="http://www.catalystframework.org/calendar/static/images/2009/asgraph/mojomojo-templates.png" alt="um dos templates do MojoMojo" />

=end pod:xhtml


=head2 ConclusE<atilde>o

Esperamos que, ao gerar e analisar os grE<aacute>ficos de seu I<schema>,
I<actions> e I<templates>, vocE<ecirc> consiga um entendimento ainda maior da
aplicaE<ccedil>E<atilde>o em que estE<aacute> trabalhando. Lembre-se do que
fez certo, revise o que pode melhorar, e aja em cima do que encontrou. Dessa
forma, vocE<ecirc> certamente se tornarE<aacute> um desenvolvedor melhor, que
E<eacute> o espE<iacute>rito dos artigos deste calendE<aacute>rio :)


=head2 Autores

Breno G. de Oliveira C<< <garu@cpan.org> >>

Bogdan Lucaciu C<< <bogdan@sinapticode.ro> >>

Traduzido e adaptado para o portuguE<ecirc>s por Breno G. de Oliveira a partir
do L<< original em
inglE<ecirc>s|http://www.catalystframework.org/calendar/2009/14 >>.


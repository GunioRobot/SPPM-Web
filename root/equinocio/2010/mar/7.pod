=head1 Captcha com Catalyst

=head2 Por que Captcha ?

O Captcha E<eacute> uma ferramenta anti-spam/anti-bot, que nada mais E<eacute>
do que um teste para saber se vocE<ecirc> E<eacute> um ser humano ou
nE<atilde>o. TambE<eacute>m pode ser usado contra ataques de forE<ccedil>a
bruta.

Uma maneira de saber que o usuE<aacute>rio E<eacute> de fato um
usuE<aacute>rio, E<eacute> usando captcha na autentificaE<ccedil>E<atilde>o,
quando o cliente efetua o logon.

=cut

=head2 Onde E<eacute> usado ?

Muitos sites usam captcha, se vocE<ecirc> errar algumas vezes a sua senha do
Gmail por exemplo,ele vai ativar o captcha. O L<http://registro.br> E<eacute>
outro exemplo, bem como o email da Yahoo, que sE<oacute> deixa vocE<ecirc>
enviar email depois de digitar um captcha.

Existem tE<eacute>cnicas para poder burlar o captcha, nE<atilde>o E<eacute>
atoa que encontramos imagens tortas e difE<iacute>ceis de ler. AtE<eacute>
mesmo perguntas inteligentes, como: "Qual letra nE<atilde>o E<eacute> vogal
?","Qual nE<uacute>mero nE<atilde>o E<eacute> E<iacute>mpar ?" e etc. Imagens
tortas, testes sobre imagens dificultam muito o computador de entender, isso
garante ainda mais que nE<atilde>o E<eacute> um robE<ocirc> acessando sua
aplicaE<ccedil>E<atilde>o.

=cut

=head2 reCaptcha

O reCaptcha E<eacute> um sistema anti-spam gratuito atravE<eacute>s do qual
vocE<ecirc> ainda ajuda a digitalizar livros e jornais.

Pera aE<iacute>, como assim ?

Existe uma tE<eacute>cnica chamada Optical Character Recognition (OCR). Quando
se escaneia um livro se usa essa tE<eacute>cnica para transformar as imagens
escaneadas em texto.

Algumas palavras por estarem borradas ou "mal escritas", tornam-se
difE<iacute>ceis para o computador reconhecer. Quando vocE<ecirc> faz o teste
de "humano" precisa digitar 2 palavras, uma delas o reCaptcha sabe qual
E<eacute> a outra nE<atilde>o, ou seja, vocE<ecirc> pega uma palavra que o OCR
nE<atilde>o conseguiu ler e diz para a mE<aacute>quina qual E<eacute> e ainda
faz o teste de "humano". Mais informaE<ccedil>E<otilde>es aqui:
L<http://recaptcha.net/learnmore.html>

=cut

=head2 Preparando o Ambiente

Nesse artigo vou usar o Captcha::reCAPTCHA E<eacute> uma
implementaE<ccedil>E<atilde>o em Perl do reCaptcha API.

O Kieren Diment escreveu um controller para o Catalyst chamado
Catalyst::Controller::reCAPTCHA, E<eacute> ele que vamos utilizar.

Antes de tudo, vocE<ecirc> vai precisar criar uma chave no site do reCaptcha
L<https://admin.recaptcha.net/accounts/signup?next=/recaptcha/createsite/>.
Tem duas chaves, uma pE<uacute>blica e outra privada, guarde as bem.

=cut

=head2 Instalando

A instalaE<ccedil>E<atilde>o pode ser feita utilizando os comandos abaixo:

	user@host:~$ cpan -i 'Catalyst::Controller::reCAPTCHA'

Irei criar uma aplicaE<ccedil>E<atilde>o teste para fazer passa E<agrave>
passo:

    user@host:~$ catalyst.pl MyCaptcha
    created "MyCaptcha"
    created "MyCaptcha/script"
    created "MyCaptcha/lib"
    created "MyCaptcha/root"
    created "MyCaptcha/root/static"
    created "MyCaptcha/root/static/images"
    created "MyCaptcha/t"
    created "MyCaptcha/lib/MyCaptcha"
    ...

Criando o View:

    user@host:~/MyCaptcha$ script/mycaptcha_create.pl view MyTT TT

=cut

=head2 Configurando

O Catalyst::Controller::reCAPTCHA precisa das chaves que vocE<ecirc> conseguiu
se cadastrando no site do reCaptcha como eu disse anteriormente, vamos fazer
isso setando dois atributos no MyCaptcha.pm. Adicione essas duas linhas B<com
as suas chaves>:

    user@host:~/MyCaptcha$ vim lib/MyCaptcha.pm
    __PACKAGE__->config->{recaptcha}->{pub_key}
        = '6LcsbAAAAAAAAPDSlBaVGXjMo1kJHwUiHzO2TDze';
    
    __PACKAGE__->config->{recaptcha}->{priv_key}
        = '6LcsbAAAAAAAANQQGqwsnkrTd7QTGRBKQQZwBH-L';

=cut

=head2 O View

Vamos comeE<ccedil>ar criando o View. Precisaremos de dois arquivos, um que
vai ter o form e o outro que vai avisar se o usuE<aacute>rio digitou o captcha
certo ou nE<atilde>o.

No primeiro arquivo, serE<aacute> enviado o captcha para um mE<eacute>todo que
checa se estE<aacute> certo ou nE<atilde>o. O mE<eacute>todo que checa o
captcha chama "checkcaptcha", veremos mais sobre ele quando estivermos
programando.

    user@host:~/MyCaptcha$ vim root/captchaform.tt
	<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
	
	<head>
	<title>Untitled Document</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	</head>
	
	<body>

	<form name="meucaptcha" action="[% c.uri_for('checkcaptcha') %]" method="POST">

	[% recaptcha %] <br />

	<input type="submit" value="submit">
	</form>

	</body>
	
	</html>


Agora no segundo template, colocaremos uma variE<aacute>vel chamada
"just_check", se o captcha estiver correto ela serE<aacute> setada para "o
usuE<aacute>rio digitou certo" caso contrE<aacute>rio ela serE<aacute> setada
para "o usuE<aacute>rio digitou errado".

    user@host:~/MyCaptcha$ vim root/checkcaptcha.tt
	<h1>[% just_check %]</h1>

=cut

=head2 Programando

Agora que as chaves jE<aacute> estE<atilde>o onde devem estar e o view
estE<aacute> criado, vamos programar. Mas antes vamos entender o que vamos
fazer.

O controller tem dois mE<eacute>todos que vamos usar, o primeiro E<eacute> o
que retorna o html com o form para enviar o captcha e o segundo E<eacute> para
verificar se o que o usuE<aacute>rio digitou estE<aacute> correto ou
nE<atilde>o.

No Root.pm vamos usar o controller: Catalyst::Controller::reCAPTCHA. Substitua
o:

	BEGIN { extends 'Catalyst::Controller' }

por:

	BEGIN { extends 'Catalyst::Controller::reCAPTCHA' }

Agora estamos usando os mE<eacute>todos adicionais, isso vai dar os dois
mE<eacute>todos que nE<oacute>s vamos precisar para a nossa
aplicaE<ccedil>E<atilde>o: "captcha_get" e "captcha_check".

Vamos criar um mE<eacute>todo para obter o captcha:

    sub captchaform : Local {
        my ( $self, $c ) = @_;
        $c->forward('captcha_get');
    }

Quando fazemos $c->forward('captcha_get') o atributo $c->stash->{'recaptcha'}
vai estar com o que precisamos magicamente (O html que forma o form).

Depois de ter o html com o form, o usuE<aacute>rio vai digitar e enviar.
Quando ele faz isso nE<oacute>s temos um retorno do reCaptcha; esse retorno
E<eacute> 1 se estiver certo.

Quando se faz o $c->forwared('captcha_check') automagicamente o atributo
$c->stash->{recaptcha_ok} E<eacute> atribuE<iacute>do para 1 se o
usuE<aacute>rio digitou o captcha corretamente, caso contrE<aacute>rio ele
nE<atilde>o existe.

Vamos criar um mE<eacute>todo para receber essa informaE<ccedil>E<atilde>o:

    sub checkcaptcha : Local {
        my ( $self, $c ) = @_;
        $c->forwared('captcha_check');
        if ( $c->stash->{recaptcha_ok} ) {
	        $c->stash->{'just_check'} = 'O UsuE<aacute>rio digitou certo';
        } else {
	        $c->stash->{'just_check'} = 'O UsuE<aacute>rio digitou errado';
        }
    }

=cut

=head2 ConclusE<atilde>o

Usando o grande CPAN e escrevendo pouquE<iacute>ssimo cE<oacute>digo
conseguimos implementar um captcha.

=head2 Agradecimento

AgradeE<ccedil>o ao Bablos e ao Thiago Rondon.

=head2 AUTOR

Daniel Mantovani <daniel.oliveira.mantovani@gmail.com>, trabalha atualmente na
empresa DND L<http://www.dnd.com.br/>

=cut
